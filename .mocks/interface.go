// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package mock_streamer is a generated GoMock package.
package mock_streamer

import (
	context "context"
	source "github.com/clausthrane/streamer/source"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockStreamHandler is a mock of StreamHandler interface
type MockStreamHandler struct {
	ctrl     *gomock.Controller
	recorder *MockStreamHandlerMockRecorder
}

// MockStreamHandlerMockRecorder is the mock recorder for MockStreamHandler
type MockStreamHandlerMockRecorder struct {
	mock *MockStreamHandler
}

// NewMockStreamHandler creates a new mock instance
func NewMockStreamHandler(ctrl *gomock.Controller) *MockStreamHandler {
	mock := &MockStreamHandler{ctrl: ctrl}
	mock.recorder = &MockStreamHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStreamHandler) EXPECT() *MockStreamHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method
func (m *MockStreamHandler) Handle(ctx context.Context, in, out interface{}, connectionError error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", ctx, in, out, connectionError)
}

// Handle indicates an expected call of Handle
func (mr *MockStreamHandlerMockRecorder) Handle(ctx, in, out, connectionError interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockStreamHandler)(nil).Handle), ctx, in, out, connectionError)
}

// MockConnector is a mock of Connector interface
type MockConnector struct {
	ctrl     *gomock.Controller
	recorder *MockConnectorMockRecorder
}

// MockConnectorMockRecorder is the mock recorder for MockConnector
type MockConnectorMockRecorder struct {
	mock *MockConnector
}

// NewMockConnector creates a new mock instance
func NewMockConnector(ctrl *gomock.Controller) *MockConnector {
	mock := &MockConnector{ctrl: ctrl}
	mock.recorder = &MockConnectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConnector) EXPECT() *MockConnectorMockRecorder {
	return m.recorder
}

// ID mocks base method
func (m *MockConnector) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID
func (mr *MockConnectorMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockConnector)(nil).ID))
}

// Connect mocks base method
func (m *MockConnector) Connect(ctx context.Context) (source.Stream, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", ctx)
	ret0, _ := ret[0].(source.Stream)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Connect indicates an expected call of Connect
func (mr *MockConnectorMockRecorder) Connect(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockConnector)(nil).Connect), ctx)
}

// StreamOpen mocks base method
func (m *MockConnector) StreamOpen() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamOpen")
	ret0, _ := ret[0].(bool)
	return ret0
}

// StreamOpen indicates an expected call of StreamOpen
func (mr *MockConnectorMockRecorder) StreamOpen() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamOpen", reflect.TypeOf((*MockConnector)(nil).StreamOpen))
}
